//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/New_Input_System_Folder/Player_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Controls"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""11eedbbd-6a73-4400-9b38-ef14b3044a8c"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2d7a2dca-9f6f-4bad-bee0-e621b70d74ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""12c6cdc8-c472-4fd3-98cd-bcae35a49023"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""87180ee7-75ef-4d8e-a6a5-6adccad497ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""e1f30f59-3bed-4d06-8a63-c3a511d35ea6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lightbulb"",
                    ""type"": ""Button"",
                    ""id"": ""cd63f280-d2ce-43b8-80ec-2e64b8f849cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HandToolSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""c7c62489-15ef-4db3-9882-491090645440"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81005dd9-7fcd-4188-a41c-1f93cc02aeec"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40b02bb5-83f9-4111-b519-15d72e8233f0"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faf45109-5421-4bd3-91f8-86b87d25e3e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""598596aa-2f63-4082-85ca-0e2e6b3751f2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b8dc2cb7-dd8d-41ad-a0ce-b915e2b4b926"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bf2e0861-103b-45d9-82ef-ce44e361e2c3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a046c6c4-9d9b-4e99-9ad2-e0024320393d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b5a5f02e-ea1f-4c09-be92-e03024e3b70b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""69cc3d66-d7c9-4df4-a583-27e09adda618"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cc8f30a9-67f2-4984-a6c4-aa324c671928"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""65b6fbe6-9970-4e40-9593-cb2c80a5820a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""38b9932a-54a8-456f-ae4f-e5165412b41c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7abd36ab-3c7c-4df9-9e57-86de99439f61"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""add2aa7a-8f89-4cda-b7f0-5066f48ba7a3"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b97e9dbf-1725-4ad3-9083-ddcc8780d27b"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf5c3548-3a64-4f3d-a8db-b172b07d0375"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Lightbulb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b939579-ad67-4372-b743-a7d0d7219eda"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": ""PC"",
                    ""action"": ""HandToolSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86ff9f88-2f17-449b-a908-34ec1badc2f1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=-1)"",
                    ""groups"": ""PC"",
                    ""action"": ""HandToolSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hook"",
            ""id"": ""412b292e-00ef-46ec-b95c-ffacbc9f126f"",
            ""actions"": [
                {
                    ""name"": ""HookShot"",
                    ""type"": ""Button"",
                    ""id"": ""1e942226-4467-430e-bb1a-4c1223283bb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HookScrolling"",
                    ""type"": ""Value"",
                    ""id"": ""5717a888-1812-4a70-84d9-b8cdbe5322b9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HookFastShot"",
                    ""type"": ""Button"",
                    ""id"": ""37f7ea7f-fadb-4255-a2aa-2170d674cebf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""86cd39b8-b7c0-4729-862e-ba50f6770c18"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HookShot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b6570bf-8481-40d1-aea1-e0b2ddd33688"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HookFastShot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbd82b2e-54e2-42d7-9e8b-7f668dbf8366"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""HookScrolling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Jump = m_Main.FindAction("Jump", throwIfNotFound: true);
        m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
        m_Main_Run = m_Main.FindAction("Run", throwIfNotFound: true);
        m_Main_Push = m_Main.FindAction("Push", throwIfNotFound: true);
        m_Main_Lightbulb = m_Main.FindAction("Lightbulb", throwIfNotFound: true);
        m_Main_HandToolSwitch = m_Main.FindAction("HandToolSwitch", throwIfNotFound: true);
        // Hook
        m_Hook = asset.FindActionMap("Hook", throwIfNotFound: true);
        m_Hook_HookShot = m_Hook.FindAction("HookShot", throwIfNotFound: true);
        m_Hook_HookScrolling = m_Hook.FindAction("HookScrolling", throwIfNotFound: true);
        m_Hook_HookFastShot = m_Hook.FindAction("HookFastShot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Jump;
    private readonly InputAction m_Main_Move;
    private readonly InputAction m_Main_Run;
    private readonly InputAction m_Main_Push;
    private readonly InputAction m_Main_Lightbulb;
    private readonly InputAction m_Main_HandToolSwitch;
    public struct MainActions
    {
        private @Player_Controls m_Wrapper;
        public MainActions(@Player_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Main_Jump;
        public InputAction @Move => m_Wrapper.m_Main_Move;
        public InputAction @Run => m_Wrapper.m_Main_Run;
        public InputAction @Push => m_Wrapper.m_Main_Push;
        public InputAction @Lightbulb => m_Wrapper.m_Main_Lightbulb;
        public InputAction @HandToolSwitch => m_Wrapper.m_Main_HandToolSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_MainActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_MainActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnRun;
                @Push.started -= m_Wrapper.m_MainActionsCallbackInterface.OnPush;
                @Push.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnPush;
                @Push.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnPush;
                @Lightbulb.started -= m_Wrapper.m_MainActionsCallbackInterface.OnLightbulb;
                @Lightbulb.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnLightbulb;
                @Lightbulb.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnLightbulb;
                @HandToolSwitch.started -= m_Wrapper.m_MainActionsCallbackInterface.OnHandToolSwitch;
                @HandToolSwitch.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnHandToolSwitch;
                @HandToolSwitch.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnHandToolSwitch;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
                @Lightbulb.started += instance.OnLightbulb;
                @Lightbulb.performed += instance.OnLightbulb;
                @Lightbulb.canceled += instance.OnLightbulb;
                @HandToolSwitch.started += instance.OnHandToolSwitch;
                @HandToolSwitch.performed += instance.OnHandToolSwitch;
                @HandToolSwitch.canceled += instance.OnHandToolSwitch;
            }
        }
    }
    public MainActions @Main => new MainActions(this);

    // Hook
    private readonly InputActionMap m_Hook;
    private IHookActions m_HookActionsCallbackInterface;
    private readonly InputAction m_Hook_HookShot;
    private readonly InputAction m_Hook_HookScrolling;
    private readonly InputAction m_Hook_HookFastShot;
    public struct HookActions
    {
        private @Player_Controls m_Wrapper;
        public HookActions(@Player_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HookShot => m_Wrapper.m_Hook_HookShot;
        public InputAction @HookScrolling => m_Wrapper.m_Hook_HookScrolling;
        public InputAction @HookFastShot => m_Wrapper.m_Hook_HookFastShot;
        public InputActionMap Get() { return m_Wrapper.m_Hook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HookActions set) { return set.Get(); }
        public void SetCallbacks(IHookActions instance)
        {
            if (m_Wrapper.m_HookActionsCallbackInterface != null)
            {
                @HookShot.started -= m_Wrapper.m_HookActionsCallbackInterface.OnHookShot;
                @HookShot.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnHookShot;
                @HookShot.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnHookShot;
                @HookScrolling.started -= m_Wrapper.m_HookActionsCallbackInterface.OnHookScrolling;
                @HookScrolling.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnHookScrolling;
                @HookScrolling.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnHookScrolling;
                @HookFastShot.started -= m_Wrapper.m_HookActionsCallbackInterface.OnHookFastShot;
                @HookFastShot.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnHookFastShot;
                @HookFastShot.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnHookFastShot;
            }
            m_Wrapper.m_HookActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HookShot.started += instance.OnHookShot;
                @HookShot.performed += instance.OnHookShot;
                @HookShot.canceled += instance.OnHookShot;
                @HookScrolling.started += instance.OnHookScrolling;
                @HookScrolling.performed += instance.OnHookScrolling;
                @HookScrolling.canceled += instance.OnHookScrolling;
                @HookFastShot.started += instance.OnHookFastShot;
                @HookFastShot.performed += instance.OnHookFastShot;
                @HookFastShot.canceled += instance.OnHookFastShot;
            }
        }
    }
    public HookActions @Hook => new HookActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
        void OnLightbulb(InputAction.CallbackContext context);
        void OnHandToolSwitch(InputAction.CallbackContext context);
    }
    public interface IHookActions
    {
        void OnHookShot(InputAction.CallbackContext context);
        void OnHookScrolling(InputAction.CallbackContext context);
        void OnHookFastShot(InputAction.CallbackContext context);
    }
}
